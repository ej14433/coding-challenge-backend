import bodyParser from 'body-parser';
import axios from 'axios';
import Ajv from 'ajv';

const ajv = new Ajv({ verbose: true });

export default function (app) {
  app.set('port', process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}

// sample middleware
export const checkJWT = (req, res, next) => {
  // example function
  if (checkJWTValidity(req.header)) return next();
  return res.status(403).json({ status: 'error', message: 'missing jwt in header' });
};

// stub function
function checkJWTValidity(jwt) {
  return true;
}

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing swagger spec in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstSwagger = (req, res, next) => {
  const url = req.originalUrl;
  axios
    .get('http://localhost:7500/api/swagger')
    .then((response) => {
      let valid = true;
      const errors = {};
      const paths = response.data.paths;

      // if url is defined in swagger spec, validate content
      if (paths.hasOwnProperty(url)) {
        const method = paths[url][req.method.toLowerCase()];
        // if this path had a parameters property, validate its parameters
        if (method.hasOwnProperty('parameters')) {
          const bodySchema = method.parameters[0].schema;
          // validate body against schema in swagger spec
          const validate = ajv.compile(bodySchema);
          const validBody = validate(req.body);

          if (!validBody) {
            valid = false;
            errors.parameters = 'Input is invalid';
          }

          const consumes = method.consumes;
          if (consumes !== req.headers['content-type']) {
            valid = false;
            errors.consumes = `The content type should be ${consumes}`;
          }
        }
      }

      if (valid) {
        return next();
      }
      return res.status(400).json(errors);
    })
    .catch(err => res.status(400).json(err));
};
